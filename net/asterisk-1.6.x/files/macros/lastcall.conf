; Last-Called number storage and calling.
; Author: Michael Geddes aka FrogOnWheels

; depends: app_macro app_system  app_record func_callerid
; depends: app_sayunixtime app_playback func_db
; depends: format_gsm codec_gsm

;[globals]
;LASTCALL_DIR=/etc/asterisk/directory

[macro-lastcallstore] ; (Number , EntryType, BufferSize)
exten => s,1,set(lcsName=lastcall)
exten => s,n,set(lcsCount=10)
exten => s,n,GotoIf($["${ARG2}" = ""]?blankarg)
exten => s,n,GotoIf($["${ARG2}" = "lastcall"]?blankarg)
exten => s,n,Set(lcsName=lastcall_${ARG2})
exten => s,n(blankarg),GotoIf($["${ARG3}" = ""]?nocount)
exten => s,n,Set(lcsCount=${ARG3})
exten => s,n(nocount),Noop(${lcsName}:${DB(${lcsName}/number1)}:${ARG1})
exten => s,n,GotoIf($["${DB(${lcsName}/number1)}" = "${ARG1}"]?setdate)
exten => s,n,set(CallerPointer=1)

exten => s,n(again),GotoIf($["${DB(${lcsName}/ddate${CallerPointer})}" = ""]?copynext)
exten => s,n,GotoIf($["${DB(${lcsName}/number${CallerPointer})}" = "${ARG1}"]?copynext)
exten => s,n,Set(CallerPointer=$[${CallerPointer}+1])
exten => s,n,GotoIf($[${CallerPointer} <= ${lcsCount}]?again)

exten => s,n(copynext),set(DB(${lcsName}/ddate$[${CallerPointer}])=${DB(${lcsName}/ddate$[${CallerPointer}-1])})
exten => s,n,set(DB(${lcsName}/number$[${CallerPointer}])=${DB(${lcsName}/number$[${CallerPointer}-1])})
exten => s,n,set(CallerPointer=$[${CallerPointer}-1])
exten => s,n,GotoIf($[${CallerPointer} > 0]?copynext)
exten => s,n,set(DB(${lcsName}/number1)=${ARG1})
exten => s,n(setdate),set(DB(${lcsName}/ddate1)=${EPOCH})

[macro-lastcallcleanup] ; (EntryType,  BufferSize {optional} )
; Clear 'Deleted' items.
exten => s,1,set(lccName=${ARG1})
exten => s,n,GotoIf($["${ARG2}" = ""]?nocount)
exten => s,n,set(lccCount=50) ; Arbitrary - big number
exten => s,n,set(lccCount=${ARG2})
exten => s,n(nocount),Set(CallerPointer=1) ; Current pointer
exten => s,n,Set(CallerCopyTo=0)           ; Location to copy to
exten => s,n(again),GotoIf($["${DB(${lccName}/ddate${CallerPointer})}" = ""]?endloop)
exten => s,n,GotoIf($["${DB(${lccName}/deleted${CallerPointer})}" = ""]?movenext)
exten => s,n,Set(lccLastVal=${DB_DELETE(${lccName}/deleted${CallerPointer})})
exten => s,n,Gotoif($["${CallerCopyTo}" != "0"]?nochange)
exten => s,n,Set(CallerCopyTo=${CallerPointer})
exten => s,n,Goto(nocopy)
exten => s,n(movenext),Gotoif($["${CallerCopyTo}" = "0"]?nocopy)
exten => s,n,Set(DB(${lccName}/number${CallerCopyTo})=${DB(${lccName}/number${CallerPointer})})
exten => s,n,Set(DB(${lccName}/ddate${CallerCopyTo})=${DB(${lccName}/ddate${CallerPointer})})
exten => s,n,Set(CallerCopyTo=$[${CallerCopyTo} + 1])
exten => s,n(nocopy),Set(CallerPointer=$[${CallerPointer} + 1])
exten => s,n,Noop(${CallerPointer}:${lccCount})
exten => s,n,GotoIf($[${CallerPointer} <= ${lccCount}]?again)
exten => s,n(endloop),GotoIf($["${CallerCopyTo}" = "0"]?endclean)
exten => s,n(againblank),GotoIf($[${CallerCopyTo} > ${lccCount}]?endclean)
exten => s,n,GotoIf($["${DB(${lccName}/ddate${CallerCopyTo})}" = ""]?endclean)
exten => s,n,Noop(${DB_DELETE(${lccName}/ddate${CallerCopyTo})})
exten => s,n,Noop(${DB_DELETE(${lccName}/number${CallerCopyTo})})
exten => s,n,Set(CallerCopyTo=$[${CallerCopyTo} + 1])
exten => s,n,goto(againblank)
exten => s,n(endclean),Noop(Finished)

[macro-lastcallapp] ; (Entrytype, Count, RingContext, Tag, autoremove{0=none, 1=whendialed, 2=whenviewed})
exten => s,1,set(lcsName=lastcall)
exten => s,n,set(lcsCount=10)
exten => s,n,GotoIf($["${ARG1}" = ""]?blankName)
exten => s,n,Set(lcsName=lastcall_${ARG1})
exten => s,n(blankName),GotoIf($["${ARG2}" = ""]?nocount)
exten => s,n,Set(lcsCount=${ARG2})
exten => s,n(nocount),set(lcsCallContext=internal)
exten => s,n,GotoIf($["${ARG3}" = ""]?blankContext)
exten => s,n,Set(lcsCallContext=${ARG3})
exten => s,n(blankContext),set(lcsTag=${ARG4})
exten => s,n,GotoIf($["${lcsTag}" != ""]?hasTag)
exten => s,n,Set(lcsTag=lastcall/previous-numbers)
exten => s,n(hasTag),set(lcsAutoRemove=${ARG5})
exten => s,n,GotoIf($["${lcsAutoRemove}" != ""]?hasAuto)
exten => s,n,Set(lcsAutoRemove=0)
exten => s,n(hasAuto),Set(lcsPointer=1)
exten => s,n,GotoIf($["${DB(${lcsName}/ddate1)}" != ""]?macrobody_lastcallapp|s|1)
exten => s,n,playback(${lcsTag}&lastcall/none-available)
[macro-lastcallmarkdelete] ; (EntryType, Item)
exten => s,1,Set(DB(${ARG1}/deleted${ARG2})=1)
[macro-lastcallundelete] ; (EntryType, Item)
exten => s,1,Set(DB(${ARG1}/deleted${ARG2})="")
exten => s,n,Noop(${DB_DELETE(${ARG1}/deleted${ARG2})})

[macro-lastcallfinddelete] ; (number, EntryType)
exten => s,1,GotoIf($["${lcsLastnum}" = "anonymous"]?notfound)
exten => s,n,set(lcfdName=lastcall)
exten => s,n,GotoIf($["${ARG2}" = ""]?blankName)
exten => s,n,Set(lcfdName=lastcall_${ARG2})
exten => s,n,Noop(Find ${ARG2} in ${lcfdName})
; Main Loop 
exten => s,n(blankName),Set(lcfdItem=0)
exten => s,n(gotonext),Set(lcfdItem=$[${lcfdItem} + 1])
exten => s,n,GotoIf($["${DB(${lcfdName}/ddate${lcfdItem})}" == ""]?notfound)
exten => s,n,GotoIf($["${DB(${lcfdName}/number${lcfdItem})}" != "${ARG1}"]?gotonext)
exten => s,n,Set(DB(${lcfdName}/deleted${lcfdItem})=1) ; Found one - delete it
exten => s,n,Macro(lastcallcleanup,${lcfdName}) ; Call cleanup to really remove it.
exten => s,n,MacroExit()
exten => s,n(notfound),Noop(Not Found: ${ARG1})
 
[macrobody_lastcallapp] ; Body to contain the lastcall menu
exten => s,1(repeat),Background(silence/1&${lcsTag})
exten => s,n(again),Background(silence/1)
; Get Current tiem
exten => s,n,Set(lcsLastnum=${DB(${lcsName}/number${lcsPointer})})
exten => s,n,Set(ddate=${DB(${lcsName}/ddate${lcsPointer})})
exten => s,n,Set(lcsLastDate=${DB(${lcsName}/ddate$[ ${lcsPointer} + 1])})
exten => s,n,GotoIf($["${lcsLastnum}" != "anonymous"]?checkblank)
exten => s,n,Set(lcsLastnum="")
exten => s,n(checkblank),GotoIf($["${lcsLastnum}" = ""]?noinfo)
; Say the number (or tag)
exten => s,n,Macro(backgroundtagnumber,${lcsLastnum},${LASTCALL_DIR})
exten => s,n,wait(.5)
exten => s,n(saycalltime),sayunixtime(${ddate},${LASTCALLZONE},QIMp) ; Only thing that isn't 'backgrounded'
; Auto delete this item if autoremove is '2'
exten => s,n,MacroIf($[${lcsAutoRemove} = 2]?lastcallmarkdelete,${lcsName},${lcsPointer} )
exten => s,n,background(silence/1)
; Say the menu .. with conditional bits.
exten => s,n,GotoIf($[$[${lcsPointer} = ${lcsCount}] | $["${lcsLastDate}" = ""]]?noprev)
exten => s,n,background(lastcall/next)
exten => s,n(noprev),GotoIf($["${lcsLastnum}" = ""]?nocall)
exten => s,n,background(lastcall/call-number)
exten => s,n(nocall),GotoIf($["${DB(${lcsName}/deleted${lcsPointer})}" != "1"]?saymarkdelete)
exten => s,n,background(lastcall/markrestore)
exten => s,n,Goto(saytag)
exten => s,n(saymarkdelete),background(lastcall/markdelete)
exten => s,n(saytag),background(lastcall/tag-number)
exten => s,n,GotoIf($[${lcsPointer} = 1]?nonext)
exten => s,n,background(lastcall/previous)
exten => s,n(nonext),background(silence/10)
exten => s,n,Goto(repeat)
exten => s,n(noinfo),background(lastcall/no-number-info)
exten => s,n,goto(saycalltime)
; Menu handlers:
exten => 5,1,GotoIf($["${lcsLastnum}" = ""]?noinfo]) ; Dial Number
exten => 5,n,Ringing()
exten => 5,n,Goto(${lcsCallContext},${lcsLastnum},1)
exten => 6,1,GotoIf($[$[${lcsPointer} = ${lcsCount}] | $["${lcsLastDate}" = ""]]?sayn) ; Previous
exten => 6,n,Set(lcsPointer=$[${lcsPointer} + 1])
exten => 4,1,GotoIf($[${lcsPointer}=1]?sayn) ; Next
exten => 4,n,Set(lcsPointer=$[${lcsPointer} - 1])
exten => _[46],n(sayn),Background(h-${lcsPointer})
exten => _[46],n,goto(s|again)
exten => 7,1,GotoIf($["${lcsLastNum}" = ""]?noinfo]) ; Tag number
exten => 7,2,macro(tagnumber,${lcsLastNum},${LASTCALL_DIR})
exten => 7,3,goto(s|again)
exten => 3,1,Macro(lastcallmarkdelete,${lcsName},${lcsPointer}) ; Mark deleted
exten => 3,2,goto(s|again)
exten => 8,1,Macro(lastcallundelete,${lcsName},${lcsPointer})   ; Undelete
;exten => 8,2,MacroIf($[${lcsAutoRemove} != 2]?s|again)
;exten => 8,3,Set(lcsAutoRemove=1) ; Don't auto-delete it 
exten => 8,2,goto(s|again)
exten => i,1,Goto(s|again)
exten => t,1,playback(goodbye)
exten => t,n,Hangup
exten => h,1,Macro(lastcallcleanup,${lcsName},${lcsCount})

